name: Deploy Trader Server to Alibaba Cloud

on:
  push:
    branches:
      - main  # 监听 main 分支的变动

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 检出代码
    - name: Checkout code
      uses: actions/checkout@v3

    # 设置 Node.js 版本
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    # 安装依赖
    - name: Install dependencies
      run: yarn install --frozen-lockfile

    # 创建 .env 文件
    - name: Create env file
      run: |
        cat > .env << 'EOF'
        # 环境变量配置
        NODE_ENV=production
        PORT=${{ secrets.PORT }}
        BASE_URL=${{ secrets.BASE_URL }}
        PRODUCTION_URL=${{ secrets.PRODUCTION_URL }}
        
        # 数据库
        DB_HOST=${{ secrets.DB_HOST }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=${{ secrets.DB_NAME }}

        # JWT 配置
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}

        # 七牛云配置
        QINIU_ACCESS_KEY=${{ secrets.QINIU_ACCESS_KEY }}
        QINIU_SECRET_KEY=${{ secrets.QINIU_SECRET_KEY }}
        QINIU_BUCKET=${{ secrets.QINIU_BUCKET }}
        QINIU_DOMAIN=${{ secrets.QINIU_DOMAIN }}

        # CORS 跨域配置
        CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
        EOF

    # 打包文件
    - name: Archive production files
      run: |
        echo "Creating tar archive..."
        tar -czf trader-server.tar.gz \
          app.js \
          ecosystem.config.js \
          package.json \
          yarn.lock \
          .env \
          config/ \
          routes/ \
          middleware/ \
          scripts/
        echo "✔ Archive completed: trader-server.tar.gz"

    # 添加服务器主机密钥，防止 SSH 提示
    - name: Add SSH Host Key
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        echo "✔ SSH host key added."

    # 部署到阿里云
    - name: Deploy to Alibaba Cloud
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        APP_DIR: ${{ secrets.SERVER_APP_DIR }}
      run: |
        # 保存 SSH 私钥
        echo "$SSH_PRIVATE_KEY" > private_key
        chmod 600 private_key

        # 手动验证是否可以 SSH 连接
        echo "🚀 Verifying SSH connectivity..."
        ssh -i private_key $SERVER_USER@$SERVER_HOST "echo 'SSH connection successful'"

        # 上传文件
        echo "🚀 Uploading archive..."
        scp -i private_key trader-server.tar.gz $SERVER_USER@$SERVER_HOST:$APP_DIR

        # 远程部署脚本
        echo "🚀 Running remote deployment script..."
        ssh -i private_key $SERVER_USER@$SERVER_HOST << 'EOF'
        set -e  # 捕获错误，任何失败都中止
        
        echo "🎯 Starting Deployment"
        echo "📂 Current directory: $(pwd)"
        echo "📂 APP_DIR directory: $APP_DIR"
        echo "✅ GitHub Actions ENV -> APP_DIR = ${{ secrets.SERVER_APP_DIR }}"
        cd $APP_DIR
        ls -la  # 确认目录内容
        
        # 修正上传文件的权限
        chmod +r trader-server.tar.gz

        # 等待文件传输完成
        sleep 2

        # 确认解压文件是否存在
        if [ ! -f "trader-server.tar.gz" ]; then
            echo "❌ Error: trader-server.tar.gz not found! Listing contents..."
            ls -la
            exit 1
        fi

        # 确保目录存在
        mkdir -p logs public/uploads
        
        # 清理旧文件，避免残留
        echo "🛠 Cleaning old deployment..."
        rm -rf *.js *.json config routes middleware scripts

        # 解压
        echo "📦 Extracting archive..."
        tar --overwrite -xzf trader-server.tar.gz
        echo "✅ Extraction completed"
        
        # 再次确认关键文件是否存在
        if [ ! -f "ecosystem.config.js" ]; then
            echo "❌ Error: ecosystem.config.js not found after extraction!"
            exit 1
        fi

        # 安装依赖
        echo "📥 Installing dependencies..."
        yarn install --production

        # 启动应用
        echo "🚀 Starting application..."
        pm2 delete "trader-server" || true
        pm2 start ecosystem.config.js --env production
        pm2 save

        # 清理压缩包
        echo "🗑 Cleaning up temporary files..."
        rm -f trader-server.tar.gz
        echo "✅ Deployment completed successfully!"
        EOF

    # 部署完成通知
    - name: Deployment notification
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ 部署成功！🎉"
        else
          echo "❌ 部署失败！🚨"
        fi